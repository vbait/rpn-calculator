{"version":3,"sources":["components/Header/Header.jsx","components/Calculator/utils.js","components/Calculator/RPNCalculator.js","components/Calculator/Operator.js","components/Calculator/constants.js","components/Calculator/Calculator.jsx","Dashboard.jsx","serviceWorker.js","index.jsx"],"names":["Header","className","href","createValidatorRegExp","operators","separator","operatorsRegex","Object","entries","map","r","regex","join","RegExp","SEPARATOR","name","Calculator","stack","this","keys","numbers","addOperators","args","forEach","operator","eval","input","validate","temp","split","value","fn","countOperands","operands","length","Error","splice","result","parseFloat","Number","isFinite","RangeError","push","test","TypeError","reset","Operator","NUMBERS","calculator","RPNCalculator","a","b","separatorReplaceRegex","additionalOperators","inputRef","useRef","useState","setOperators","setNumbers","setValue","error","setError","readonly","setReadonly","handleReadonly","useCallback","v","handleChange","formatted","replace","current","focus","handleApply","trim","err","message","handleBackSpace","state","slice","handleClear","handleReset","handleInputKeyUp","event","keyCode","preventDefault","useEffect","addEventListener","removeEventListener","chunkedOperators","useMemo","myArray","chunkSize","index","arrayLength","tempArray","myChunk","chunkArray","Form","Check","type","id","label","checked","onChange","e","target","readOnly","ref","rows","disabled","Alert","variant","Button","onClick","key","defaultProps","Math","sqrt","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f2c03adc.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <nav className=\"navbar navbar-expand-lg fixed-top navbar-dark bg-dark\">\n      <a className=\"navbar-brand mr-auto mr-lg-0\" href=\".\">\n        RPN Calculator\n      </a>\n    </nav>\n  );\n}\n\nexport default Header;\n","/**\n * Returns an array with arrays of the given size.\n *\n * @param myArray {Array} array to split\n * @param chunk_size {Integer} Size of every group\n */\nfunction chunkArray(myArray, chunkSize) {\n  let index = 0;\n  const arrayLength = myArray.length;\n  const tempArray = [];\n\n  for (index = 0; index < arrayLength; index += chunkSize) {\n    const myChunk = myArray.slice(index, index + chunkSize);\n    // Do something if you want with the group\n    tempArray.push(myChunk);\n  }\n  return tempArray;\n}\n\n/**\n * @typedef {Object} Operator\n * @property {string} name Operator name\n * @property {function} fn Operator function\n * @property {string} [regex=`\\\\${name}`] Regex for validation\n * @property {number} [countOperands=2] Count of function arguments\n */\n\n/**\n * Returns an regular expression to validate input data for RPN Calculator.\n *\n * @param {Object.<string, import('./Operator').Operator>} operators Object with operators (Operator)\n * @param {string} separator Separator between operators and operands\n * @return {string}\n */\nfunction createValidatorRegExp(operators, separator) {\n  const operatorsRegex = Object.entries(operators)\n    .map(([, { regex: r }]) => {\n      return `${r}`;\n    })\n    .join('|');\n  return new RegExp(\n    `^((-?\\\\d+\\\\.?\\\\d*${separator})|(-?\\\\d*\\\\.?\\\\d+${separator})|((${operatorsRegex})${separator}))*((-?\\\\d+\\\\.?\\\\d*)|(-?\\\\d*\\\\.?\\\\d+)|(${operatorsRegex}))$`,\n  );\n}\n\nexport { chunkArray, createValidatorRegExp };\n\n// ^((-?\\d+\\.?\\d* )|(-?\\d*\\.?\\d+ )|((sin|cos|\\-|\\*) ))*((-?\\d+\\.?\\d*)|(-?\\d*\\.?\\d+)|(sin|cos|\\-|\\*))$\n","import { createValidatorRegExp } from './utils';\n\n/**\n * @typedef {import('./Operator').Operator} Operator\n */\n\n/**\n * @typedef {Object} SEPARATOR\n * @property {string} name\n * @property {string} regex\n */\n\n/** @constant {SEPARATOR} */\nconst SEPARATOR = { name: ' ', regex: ' ' };\n\n/**\nRPN Calculator\n@constructor\n*/\nfunction Calculator() {\n  const stack = []; // stack to keep all numbers\n\n  /**\n   * @type {Object.<string, Operator>}\n   */\n  const operators = {}; // all operators mapped by name\n  let regex = new RegExp(); // all operators mapped by name\n\n  /**\n   * Validate if operator is presented\n   * @param {string} operator Name of Operator\n   * @returns {boolean}\n   */\n  function isOperatorValid(operator) {\n    return !!operators[operator];\n  }\n\n  /**\n   * Validate if has enough operands for operator\n   * @param {string} st Stack of numbers\n   * @param {number} operands Count of operands\n   * @returns {boolean}\n   */\n  function isStackValid(st, operands) {\n    return st.length >= operands;\n  }\n\n  /**\n   * Return list of operators names\n   * @returns {Array.<string>}\n   */\n  this.operators = () => Object.keys(operators);\n\n  /**\n   * Return separator object\n   * @returns {SEPARATOR}\n   */\n  this.separator = () => SEPARATOR;\n\n  /**\n   * Return list of operands\n   * @returns {Array.<number>}\n   */\n  this.numbers = () => [...stack];\n\n  /**\n   * Add new operators\n   * @param {...Operator} args\n   */\n  this.addOperators = (...args) => {\n    args.forEach((operator) => {\n      operators[operator.name] = operator;\n    });\n    regex = createValidatorRegExp(operators, SEPARATOR.regex);\n    return this;\n  };\n\n  /**\n   * Add new values to stack and eval if there are operations\n   * @param {string} input String with operators and operands\n   * @throws Will throw an error if the operators are not valid or operands are not Number.\n   */\n  this.eval = (input) => {\n    this.validate(input);\n    const temp = [...stack];\n    input.split(SEPARATOR.name).forEach((value) => {\n      if (isOperatorValid(value)) {\n        const { fn, countOperands } = operators[value];\n        if (!isStackValid(temp, countOperands)) {\n          throw Error('Too many operators.');\n        }\n        const args = temp.splice(-1 * countOperands, countOperands);\n        const result = parseFloat(fn(...args));\n        if (!Number.isFinite(result)) {\n          throw RangeError(\n            `Cannot use operator \"${value}\" to value(s): ${args.join(' ')}.`,\n          );\n        }\n        temp.push(result);\n      } else {\n        const result = parseFloat(value);\n        if (!Number.isFinite(result)) {\n          throw RangeError(`Value \"${value}\" is not a number.`);\n        }\n        temp.push(result);\n      }\n    });\n    stack.splice(0, stack.length, ...temp);\n  };\n\n  /**\n   * Validate string\n   * @param {string} input String with operators and operands\n   * @throws Will throw an error if the operators are not valid or operands are not Number.\n   */\n  this.validate = (input) => {\n    if (!regex.test(input)) {\n      throw TypeError('Input value is not valid.');\n    }\n  };\n\n  /**\n   * Reset calculator\n   */\n  this.reset = () => {\n    stack.splice(0, stack.length);\n  };\n}\n\nexport default Calculator;\n","/**\n * @typedef {Object} Operator\n * @property {string} name Operator name\n * @property {function} fn Operator function\n * @property {string} [regex=`\\\\${name}`] Regex for validation\n * @property {number} [countOperands=2] Count of function arguments\n */\n\n/**\nOperator for RPN Calculator\n@constructor\n@param {string} name Operator name\n@param {function} fn Operator function\n@param {string} [regex=`\\\\${name}`] Regex for validation\n@param {number} [countOperands=2] Count of function arguments\n*/\nfunction Operator(name, fn, regex, countOperands = 2) {\n  this.name = name;\n  this.regex = regex || `\\\\${name}`;\n  this.countOperands = countOperands;\n  this.fn = fn;\n}\n\nexport default Operator;\n","/* eslint-disable import/prefer-default-export */\n\nexport const NUMBERS = [7, 8, 9, 4, 5, 6, 1, 2, 3];\n","/* eslint-disable react/no-array-index-key */\nimport React, {\n  useState,\n  useCallback,\n  useRef,\n  useEffect,\n  useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { chunkArray } from './utils';\nimport RPNCalculator from './RPNCalculator';\nimport Operator from './Operator';\nimport { NUMBERS } from './constants';\nimport './styles.scss';\n\nconst calculator = new RPNCalculator();\ncalculator.addOperators(\n  new Operator('+', (a, b) => a + b),\n  new Operator('-', (a, b) => a - b),\n  new Operator('*', (a, b) => a * b),\n  new Operator('/', (a, b) => a / b),\n);\n\nconst separator = calculator.separator();\nconst separatorReplaceRegex = new RegExp(`(${separator.regex}){2,}`, 'g');\n\nfunction Calculator({ operators: additionalOperators }) {\n  const inputRef = useRef();\n  const [operators, setOperators] = useState(calculator.operators());\n  const [numbers, setNumbers] = useState(calculator.numbers());\n  const [value, setValue] = useState('');\n  const [error, setError] = useState();\n  const [readonly, setReadonly] = useState(false);\n\n  const handleReadonly = useCallback(() => {\n    setReadonly((v) => !v);\n  }, [setReadonly]);\n\n  const handleChange = useCallback(\n    (v) => {\n      const formatted = v.replace(separatorReplaceRegex, separator.name);\n      setError();\n      setValue(formatted);\n      inputRef.current.focus();\n    },\n    [setValue, setError, inputRef],\n  );\n\n  const handleApply = useCallback(() => {\n    if (!value) return;\n    try {\n      calculator.eval(value.trim());\n      setValue('');\n      setNumbers(calculator.numbers());\n    } catch (err) {\n      setError(err.message);\n    }\n  }, [setError, setValue, setNumbers, value]);\n\n  const handleBackSpace = useCallback(() => {\n    setError();\n    setValue((state) => {\n      return state.slice(0, -1);\n    });\n    inputRef.current.focus();\n  }, [setError, setValue]);\n\n  const handleClear = useCallback(() => {\n    setValue('');\n    setError();\n  }, [setValue]);\n\n  const handleReset = useCallback(() => {\n    calculator.reset();\n    setValue('');\n    setError();\n    setNumbers(calculator.numbers());\n  }, [setValue]);\n\n  const handleInputKeyUp = useCallback(\n    (event) => {\n      if (event.keyCode === 13) {\n        event.preventDefault();\n        handleApply();\n      }\n    },\n    [handleApply],\n  );\n\n  useEffect(() => {\n    const input = inputRef.current;\n    input.addEventListener('keyup', handleInputKeyUp);\n    return () => {\n      input.removeEventListener('keyup', handleInputKeyUp);\n    };\n  }, [inputRef, handleInputKeyUp]);\n\n  useEffect(() => {\n    calculator.addOperators(...additionalOperators);\n    setOperators(calculator.operators());\n  }, [additionalOperators, setOperators]);\n\n  const chunkedOperators = useMemo(() => {\n    return chunkArray(operators, 4);\n  }, [operators]);\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"filter\">\n        <Form.Check\n          type=\"checkbox\"\n          id=\"id_readonly\"\n          label=\"Readonly\"\n          checked={readonly}\n          onChange={handleReadonly}\n        />\n      </div>\n      <div className=\"display\">\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => handleChange(e.target.value)}\n          className=\"form-control\"\n          readOnly={readonly}\n          ref={inputRef}\n        />\n      </div>\n      <div className=\"display\">\n        <textarea\n          className=\"form-control\"\n          readOnly\n          rows=\"2\"\n          disabled\n          value={numbers.join(' ')}\n        />\n        {!!error && <Alert variant=\"danger\">{error}</Alert>}\n      </div>\n      <div className=\"reset\">\n        <Button variant=\"danger\" onClick={handleBackSpace} disabled={!value}>\n          {'<-'}\n        </Button>\n        <Button variant=\"danger\" onClick={handleClear} disabled={!value}>\n          CE\n        </Button>\n        <Button\n          variant=\"danger\"\n          onClick={handleReset}\n          disabled={!numbers.length && !value}\n        >\n          C\n        </Button>\n      </div>\n      <div className=\"calculator-container\">\n        <div className=\"numbers\">\n          {NUMBERS.map((v) => (\n            <Button key={v} onClick={() => handleChange(value + v)}>\n              {v}\n            </Button>\n          ))}\n          <Button onClick={() => handleChange(`${value}0`)} className=\"double\">\n            0\n          </Button>\n          <Button onClick={() => handleChange(`${value}.`)}>.</Button>\n        </div>\n        {chunkedOperators.map((rows, index) => (\n          <div key={index} className=\"operations\">\n            {rows.map((operator) => (\n              <Button\n                key={operator}\n                onClick={() => handleChange(value + operator)}\n                variant=\"secondary\"\n              >\n                {operator}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"manipulate\">\n        <Button\n          onClick={() => handleChange(value + separator.name)}\n          disabled={!value}\n          variant=\"info\"\n        >\n          space\n        </Button>\n        <Button\n          onClick={handleApply}\n          disabled={!value || !!error}\n          variant=\"info\"\n        >\n          apply\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nCalculator.defaultProps = {\n  operators: [],\n};\n\nCalculator.propTypes = {\n  operators: PropTypes.arrayOf(PropTypes.instanceOf(Operator)),\n};\n\nexport default Calculator;\n","import React from 'react';\nimport Header from './components/Header';\nimport Calculator, { Operator } from './components/Calculator';\n\nconst operators = [\n  new Operator('sqrt', (a) => Math.sqrt(a), 'sqrt', 1),\n  new Operator('^', (a, b) => a ** b, '\\\\^', 2),\n  new Operator('%', (a, b) => (a / 100) * b, '\\\\%', 2),\n];\n\nfunction Dashboard() {\n  return (\n    <>\n      <Header />\n      <div className=\"p-3 my-3\">\n        <Calculator operators={operators} />\n      </div>\n    </>\n  );\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Dashboard from './Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}